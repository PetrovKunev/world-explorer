'use client'

import { useState, useEffect } from 'react'

export default function BasicTest() {
  const [result, setResult] = useState<string>('')
  const [loading, setLoading] = useState(false)
  const [mounted, setMounted] = useState(false)
  const [browserInfo, setBrowserInfo] = useState({
    browser: 'Loading...',
    fetch: 'Loading...'
  })

  useEffect(() => {
    setMounted(true)
    setBrowserInfo({
      browser: typeof window !== 'undefined' ? 'Available' : 'Not Available',
      fetch: typeof fetch !== 'undefined' ? 'Available' : 'Not Available'
    })
  }, [])

  const testNetwork = async () => {
    setLoading(true)
    setResult('–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞...')
    
    try {
      // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤ fetch —Å timeout
      console.log('üîß –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–æ–≤ —Ç–µ—Å—Ç...')
      
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 —Å–µ–∫—É–Ω–¥–∏ timeout
      
      const response = await fetch('https://httpbin.org/get', {
        signal: controller.signal
      })
      
      clearTimeout(timeoutId)
      
      if (!response.ok) {
        setResult(`‚ùå HTTP –≥—Ä–µ—à–∫–∞: ${response.status}`)
        return
      }
      
      setResult('‚úÖ –ú—Ä–µ–∂–∞—Ç–∞ —Ä–∞–±–æ—Ç–∏! –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Supabase...')
      console.log('‚úÖ –ë–∞–∑–æ–≤ fetch —É—Å–ø–µ—à–µ–Ω')
      
      // –¢–µ—Å—Ç 2: Supabase URL —Å –ø–æ-–¥–æ–±—Ä–∏ headers
      console.log('üîß –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Supabase...')
      
      const supabaseResponse = await fetch('https://bflpybciorqdbirqxsj.supabase.co/rest/v1/', {
        method: 'GET',
        headers: {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJmbHB5YmNpb3JxZGlicXJ4c2VqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0MDUwNzEsImV4cCI6MjA2OTk4MTA3MX0.eCnD02jGgs4H1DFKwYDCy_RHf7EkjsRd6vJf9dK9_T8',
          'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJmbHB5YmNpb3JxZGlicXJ4c2VqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0MDUwNzEsImV4cCI6MjA2OTk4MTA3MX0.eCnD02jGgs4H1DFKwYDCy_RHf7EkjsRd6vJf9dK9_T8',
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        signal: controller.signal
      })

      if (!supabaseResponse.ok) {
        const errorText = await supabaseResponse.text()
        console.error('‚ùå Supabase error:', errorText)
        setResult(`‚ùå Supabase –≥—Ä–µ—à–∫–∞: ${supabaseResponse.status} - ${errorText}`)
      } else {
        console.log('‚úÖ Supabase URL —Ä–∞–±–æ—Ç–∏!')
        setResult('‚úÖ Supabase URL —Ä–∞–±–æ—Ç–∏!')
      }
      
    } catch (err: unknown) {
      console.error('‚ùå Network error:', err)
      if (err instanceof Error) {
        if (err.name === 'AbortError') {
          setResult('‚ùå –ú—Ä–µ–∂–æ–≤–∞ –≥—Ä–µ—à–∫–∞: Timeout (10 —Å–µ–∫—É–Ω–¥–∏)')
        } else {
          setResult(`‚ùå –ú—Ä–µ–∂–æ–≤–∞ –≥—Ä–µ—à–∫–∞: ${err.message}`)
        }
      } else {
        setResult(`‚ùå –ú—Ä–µ–∂–æ–≤–∞ –≥—Ä–µ—à–∫–∞: ${String(err)}`)
      }
    } finally {
      setLoading(false)
    }
  }

  const testLocalStorage = () => {
    try {
      localStorage.setItem('test', 'working')
      const value = localStorage.getItem('test')
      localStorage.removeItem('test')
      
      if (value === 'working') {
        setResult('‚úÖ LocalStorage —Ä–∞–±–æ—Ç–∏!')
      } else {
        setResult('‚ùå LocalStorage –Ω–µ —Ä–∞–±–æ—Ç–∏')
      }
    } catch (err) {
      setResult(`‚ùå LocalStorage –≥—Ä–µ—à–∫–∞: ${err}`)
    }
  }

  const testConsole = () => {
    console.log('üîß Console test - –∞–∫–æ –≤–∏–∂–¥–∞—Ç–µ —Ç–æ–≤–∞, console —Ä–∞–±–æ—Ç–∏!')
    console.error('‚ùå Error test')
    console.warn('‚ö†Ô∏è Warning test')
    setResult('‚úÖ Console —Ä–∞–±–æ—Ç–∏! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ F12 ‚Üí Console')
  }

  const testSimpleFetch = async () => {
    setLoading(true)
    setResult('–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Å—Ç fetch...')
    
    try {
      console.log('üîß –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Å—Ç fetch...')
      
      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1')
      
      if (!response.ok) {
        setResult(`‚ùå HTTP –≥—Ä–µ—à–∫–∞: ${response.status}`)
        return
      }
      
      const data = await response.json()
      console.log('‚úÖ Simple fetch —É—Å–ø–µ—à–µ–Ω:', data)
      setResult('‚úÖ –ü—Ä–æ—Å—Ç fetch —Ä–∞–±–æ—Ç–∏!')
      
    } catch (err: unknown) {
      console.error('‚ùå Simple fetch error:', err)
      if (err instanceof Error) {
        setResult(`‚ùå –ü—Ä–æ—Å—Ç fetch –≥—Ä–µ—à–∫–∞: ${err.message}`)
      } else {
        setResult(`‚ùå –ü—Ä–æ—Å—Ç fetch –≥—Ä–µ—à–∫–∞: ${String(err)}`)
      }
    } finally {
      setLoading(false)
    }
  }

  if (!mounted) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full">
          <h2 className="text-2xl font-bold mb-6 text-center">Loading...</h2>
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full">
        <h2 className="text-2xl font-bold mb-6 text-center">Basic Test</h2>
        
        <div className="space-y-4">
          <div className="p-3 bg-blue-100 border border-blue-400 text-blue-700 rounded">
            <strong>–†–µ–∑—É–ª—Ç–∞—Ç:</strong> {result}
          </div>
          
          <div className="flex space-x-2 flex-wrap gap-2">
            <button
              onClick={testNetwork}
              disabled={loading}
              className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
            >
              {loading ? '–¢–µ—Å—Ç–≤–∞–Ω–µ...' : 'Test Network'}
            </button>
            
            <button
              onClick={testSimpleFetch}
              disabled={loading}
              className="flex-1 bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700 transition-colors disabled:opacity-50"
            >
              {loading ? '–¢–µ—Å—Ç–≤–∞–Ω–µ...' : 'Simple Fetch'}
            </button>
            
            <button
              onClick={testLocalStorage}
              className="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors"
            >
              Test LocalStorage
            </button>
            
            <button
              onClick={testConsole}
              className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors"
            >
              Test Console
            </button>
          </div>
          
          <div className="text-sm text-gray-600">
            <p><strong>Browser:</strong> {browserInfo.browser}</p>
            <p><strong>Fetch:</strong> {browserInfo.fetch}</p>
            <p><strong>Status:</strong> {loading ? 'Loading...' : 'Ready'}</p>
          </div>
        </div>
      </div>
    </div>
  )
} 